/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { of } from 'rxjs';
import { map, delay, switchMap, catchError } from 'rxjs/operators';
import { copyToClipboard, mergeDeep } from './utils';
/**
 * Meta tags operator - Serialize meta tags into the sharer URL
 */
export const /** @type {?} */ metaTagsOperators = [
    map((ref) => {
        // Social network sharer URL */
        const /** @type {?} */ SharerURL = ref.prop.share[ref.os];
        if (SharerURL) {
            // object contains supported meta tags
            const /** @type {?} */ metaTags = ref.prop.share.metaTags;
            // object contains meta tags values */
            const /** @type {?} */ metaTagsValues = ref.metaTags;
            let /** @type {?} */ link = '';
            // Set each meta tag with user value
            if (metaTags) {
                link = Object.entries(metaTags).map(([key, metaTag]) => metaTagsValues[key] ? `${metaTag}=${encodeURIComponent(metaTagsValues[key])}` : '').join('&');
            }
            return SharerURL + link;
        }
        return;
    })
];
/**
 * Print button operator
 */
export const /** @type {?} */ printOperators = [
    map(() => window.print())
];
/**
 * Copy link to clipboard, used for copy button
 */
export const /** @type {?} */ copyOperators = [
    map((ref) => {
        // Disable the button
        ref.renderer.setStyle(ref.el, 'pointer-events', 'none');
        ref.temp = { text: ref.prop.text, icon: ref.prop.icon };
        ref.metaTags.url = decodeURIComponent(ref.metaTags.url);
        return ref;
    }),
    switchMap((ref) => copyToClipboard(ref.metaTags.url, ref.os).pipe(map(() => {
        ref.prop.text = ref.prop.successText;
        ref.prop.icon = ref.prop.successIcon;
        return ref;
    }), catchError(() => {
        ref.prop.text = ref.prop.failText;
        ref.prop.icon = ref.prop.failIcon;
        return of(ref);
    }))),
    map((ref) => {
        ref.cd.markForCheck();
        return ref;
    }),
    delay(2000),
    map((ref) => {
        // Enable the button
        ref.renderer.setStyle(ref.el, 'pointer-events', 'auto');
        // Reset copy button text and icon */
        ref.prop.text = ref.temp.text;
        ref.prop.icon = ref.temp.icon;
        ref.cd.markForCheck();
    })
];
/**
 * Add the share URL to message body, used for WhatsApp and Email buttons
 */
export const /** @type {?} */ urlInMessageOperators = [
    map((ref) => {
        const /** @type {?} */ description = ref.metaTags.description;
        const /** @type {?} */ url = ref.metaTags.url;
        const /** @type {?} */ newRef = {
            metaTags: {
                description: description ? `${description}\r\n${url}` : url
            }
        };
        return mergeDeep(ref, newRef);
    })
];
export const /** @type {?} */ FacebookCountOperators = [
    map((res) => +res.share.share_count)
];
export const /** @type {?} */ PinterestCountOperators = [
    map((text) => JSON.parse(text.replace(/^receiveCount\((.*)\)/, '$1'))),
    map((res) => +res.count)
];
export const /** @type {?} */ TumblrCountOperators = [
    map((res) => +res.response.note_count)
];
export const /** @type {?} */ RedditCountOperators = [
    map((res) => +res.data.children[0].data.score)
];

//# sourceMappingURL=data:application/json;base64,