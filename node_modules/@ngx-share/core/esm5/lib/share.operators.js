/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of } from 'rxjs';
import { map, delay, switchMap, catchError } from 'rxjs/operators';
import { copyToClipboard, mergeDeep } from './utils';
/**
 * Meta tags operator - Serialize meta tags into the sharer URL
 */
export var /** @type {?} */ metaTagsOperators = [
    map(function (ref) {
        // Social network sharer URL */
        var /** @type {?} */ SharerURL = ref.prop.share[ref.os];
        if (SharerURL) {
            // object contains supported meta tags
            var /** @type {?} */ metaTags = ref.prop.share.metaTags;
            // object contains meta tags values */
            var /** @type {?} */ metaTagsValues_1 = ref.metaTags;
            var /** @type {?} */ link = '';
            // Set each meta tag with user value
            if (metaTags) {
                link = Object.entries(metaTags).map(function (_a) {
                    var _b = tslib_1.__read(_a, 2), key = _b[0], metaTag = _b[1];
                    return metaTagsValues_1[key] ? metaTag + "=" + encodeURIComponent(metaTagsValues_1[key]) : '';
                }).join('&');
            }
            return SharerURL + link;
        }
        return;
    })
];
/**
 * Print button operator
 */
export var /** @type {?} */ printOperators = [
    map(function () { return window.print(); })
];
/**
 * Copy link to clipboard, used for copy button
 */
export var /** @type {?} */ copyOperators = [
    map(function (ref) {
        // Disable the button
        ref.renderer.setStyle(ref.el, 'pointer-events', 'none');
        ref.temp = { text: ref.prop.text, icon: ref.prop.icon };
        ref.metaTags.url = decodeURIComponent(ref.metaTags.url);
        return ref;
    }),
    switchMap(function (ref) { return copyToClipboard(ref.metaTags.url, ref.os).pipe(map(function () {
        ref.prop.text = ref.prop.successText;
        ref.prop.icon = ref.prop.successIcon;
        return ref;
    }), catchError(function () {
        ref.prop.text = ref.prop.failText;
        ref.prop.icon = ref.prop.failIcon;
        return of(ref);
    })); }),
    map(function (ref) {
        ref.cd.markForCheck();
        return ref;
    }),
    delay(2000),
    map(function (ref) {
        // Enable the button
        ref.renderer.setStyle(ref.el, 'pointer-events', 'auto');
        // Reset copy button text and icon */
        ref.prop.text = ref.temp.text;
        ref.prop.icon = ref.temp.icon;
        ref.cd.markForCheck();
    })
];
/**
 * Add the share URL to message body, used for WhatsApp and Email buttons
 */
export var /** @type {?} */ urlInMessageOperators = [
    map(function (ref) {
        var /** @type {?} */ description = ref.metaTags.description;
        var /** @type {?} */ url = ref.metaTags.url;
        var /** @type {?} */ newRef = {
            metaTags: {
                description: description ? description + "\r\n" + url : url
            }
        };
        return mergeDeep(ref, newRef);
    })
];
export var /** @type {?} */ FacebookCountOperators = [
    map(function (res) { return +res.share.share_count; })
];
export var /** @type {?} */ PinterestCountOperators = [
    map(function (text) { return JSON.parse(text.replace(/^receiveCount\((.*)\)/, '$1')); }),
    map(function (res) { return +res.count; })
];
export var /** @type {?} */ TumblrCountOperators = [
    map(function (res) { return +res.response.note_count; })
];
export var /** @type {?} */ RedditCountOperators = [
    map(function (res) { return +res.data.children[0].data.score; })
];

//# sourceMappingURL=data:application/json;base64,