(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngx-share/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@ngx-share/button')) :
    typeof define === 'function' && define.amd ? define('@ngx-share/buttons', ['exports', '@angular/core', '@ngx-share/core', 'rxjs', 'rxjs/operators', '@angular/common', '@ngx-share/button'], factory) :
    (factory((global['ngx-share'] = global['ngx-share'] || {}, global['ngx-share'].buttons = {}),global.ng.core,null,global.rxjs,global.rxjs.operators,global.ng.common,null));
}(this, (function (exports,core,core$1,rxjs,operators,common,button) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ShareButtonsComponent = (function () {
        function ShareButtonsComponent(_share) {
            this._share = _share;
            this._stateWorker$ = new rxjs.BehaviorSubject({
                includedButtons: [],
                excludedButtons: [],
                userButtons: [],
                selectedButtons: [],
                expanded: true,
                shownCount: Object.keys(this._share.config.prop).length
            });
            this.theme = this._share.theme;
            /**
             * Show buttons icon
             */
            this.showIcon = true;
            /**
             * Show buttons name
             */
            this.showText = false;
            /**
             * Show buttons share count
             */
            this.showCount = false;
            /**
             * Buttons size
             */
            this.size = 0;
            /**
             * Share count event
             */
            this.count = new core.EventEmitter();
            /**
             * Share dialog opened event
             */
            this.opened = new core.EventEmitter();
            /**
             * Share dialog closed event
             */
            this.closed = new core.EventEmitter();
        }
        Object.defineProperty(ShareButtonsComponent.prototype, "includedButtons", {
            set: /**
             * @param {?} includedButtons
             * @return {?}
             */ function (includedButtons) {
                this.updateState({ includedButtons: includedButtons });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareButtonsComponent.prototype, "excludedButtons", {
            set: /**
             * @param {?} excludedButtons
             * @return {?}
             */ function (excludedButtons) {
                this.updateState({ excludedButtons: excludedButtons });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareButtonsComponent.prototype, "shownButtons", {
            set: /**
             * @param {?} shownCount
             * @return {?}
             */ function (shownCount) {
                this.updateState({ shownCount: shownCount });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ShareButtonsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.state$ = this._stateWorker$.pipe(operators.map(function (state) {
                    // Use component include buttons, otherwise fallback to global include buttons
                    var /** @type {?} */ includedButtons = state.includedButtons.length ? state.includedButtons : state.userButtons;
                    var /** @type {?} */ userButtons = includedButtons.filter(function (btn) { return state.excludedButtons.indexOf(btn) < 0; });
                    var /** @type {?} */ selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);
                    return {
                        userButtons: userButtons,
                        selectedButtons: selectedButtons,
                        expanded: state.expanded,
                        shownCount: state.shownCount,
                        moreIcon: state.moreIcon,
                        lessIcon: state.lessIcon
                    };
                }));
                /** Subscribe to share buttons config changes, This updates the component whenever a new button is added */
                this._configSub$ = this._share.config$.subscribe(function (config) {
                    // Use global include buttons, otherwise fallback to all buttons
                    var /** @type {?} */ includedButtons = config.options.include.length ? config.options.include : Object.keys(config.prop);
                    var /** @type {?} */ userButtons = includedButtons.filter(function (btn) { return config.options.exclude.indexOf(btn) < 0; });
                    _this.updateState({
                        userButtons: userButtons,
                        expanded: false,
                        moreIcon: config.options.moreButtonIcon,
                        lessIcon: config.options.lessButtonIcon
                    });
                });
            };
        /**
         * @return {?}
         */
        ShareButtonsComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this._configSub$) {
                    this._configSub$.unsubscribe();
                }
                this._stateWorker$.complete();
            };
        /**
         * @param {?} state
         * @return {?}
         */
        ShareButtonsComponent.prototype.updateState = /**
         * @param {?} state
         * @return {?}
         */
            function (state) {
                this._stateWorker$.next(__assign({}, this._stateWorker$.getValue(), state));
            };
        ShareButtonsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'share-buttons',
                        template: "<div *ngIf=\"state$ | async; let state\" class=\"sb-group sb-{{theme}}\">\n\n  <share-button *ngFor=\"let button of state.selectedButtons\"\n                [button]=\"button\"\n                [theme]=\"theme\"\n                [url]=\"url\"\n                [title]=\"title\"\n                [description]=\"description\"\n                [image]=\"image\"\n                [tags]=\"tags\"\n                [autoSetMeta]=\"autoSetMeta\"\n                [showCount]=\"showCount\"\n                [showIcon]=\"showIcon\"\n                [showText]=\"showText\"\n                [size]=\"size\"\n                (opened)=\"opened.emit($event)\"\n                (closed)=\"closed.emit($event)\"\n                (count)=\"count.emit($event)\"></share-button>\n\n  <div class=\"sb-button sb-{{theme}}\">\n\n    <expand-button *ngIf=\"state.shownCount < state.userButtons.length\"\n                   [expanded]=\"state.expanded\"\n                   [moreIcon]=\"state.moreIcon\"\n                   [lessIcon]=\"state.lessIcon\"\n                   [size]=\"(1 + size/20) * 14\"\n                   (toggle)=\"updateState({expanded: $event})\">\n    </expand-button>\n\n  </div>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    },] },
        ];
        /** @nocollapse */
        ShareButtonsComponent.ctorParameters = function () {
            return [
                { type: core$1.ShareButtons }
            ];
        };
        ShareButtonsComponent.propDecorators = {
            theme: [{ type: core.Input }],
            includedButtons: [{ type: core.Input, args: ['include',] }],
            excludedButtons: [{ type: core.Input, args: ['exclude',] }],
            shownButtons: [{ type: core.Input, args: ['show',] }],
            url: [{ type: core.Input }],
            title: [{ type: core.Input }],
            description: [{ type: core.Input }],
            image: [{ type: core.Input }],
            tags: [{ type: core.Input }],
            autoSetMeta: [{ type: core.Input }],
            showIcon: [{ type: core.Input }],
            showText: [{ type: core.Input }],
            showCount: [{ type: core.Input }],
            size: [{ type: core.Input }],
            count: [{ type: core.Output }],
            opened: [{ type: core.Output }],
            closed: [{ type: core.Output }]
        };
        return ShareButtonsComponent;
    }());
    /**
     * Explanation of the above code:
     * ------------------------------
     Include buttons: includes only wanted buttons and excludes the rest
     Exclude buttons: excludes only the unwanted buttons
     User buttons = Include buttons - exclude buttons
     Selected Buttons = User buttons [shown number]

     =====================================================================================

     Why do we use both include and exclude inputs?

     Because it is easier for users who want to disable one button to use [exclude] input instead of writing an array of all included buttons
     And it is easier for users who want to enable only one button to use [include] input instead of writing an array of all excluded buttons
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ExpandButtonComponent = (function () {
        function ExpandButtonComponent(el) {
            this.toggle = new core.EventEmitter();
            el.nativeElement.style.setProperty('--button-color', '#FF6651');
        }
        ExpandButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'expand-button',
                        template: "\n    <button class=\"sb-wrapper sb-expand sb-show-icon\"\n            [style.fontSize.px]=\"size\"\n            (click)=\"toggle.emit(!expanded)\">\n\n      <div class=\"sb-inner\">\n        <div class=\"sb-content\">\n          <div class=\"sb-icon\">\n            <fa-icon [icon]=\"expanded ? lessIcon : moreIcon\"></fa-icon>\n          </div>\n        </div>\n      </div>\n    </button>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    },] },
        ];
        /** @nocollapse */
        ExpandButtonComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        ExpandButtonComponent.propDecorators = {
            moreIcon: [{ type: core.Input }],
            lessIcon: [{ type: core.Input }],
            expanded: [{ type: core.Input }],
            size: [{ type: core.Input }],
            toggle: [{ type: core.Output }]
        };
        return ExpandButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function ShareButtonsFactory(config) {
        return new core$1.ShareButtons(config);
    }
    var ShareButtonsModule = (function () {
        function ShareButtonsModule() {
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        ShareButtonsModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: ShareButtonsModule,
                    providers: [
                        { provide: core$1.CONFIG, useValue: config },
                        {
                            provide: core$1.ShareButtons,
                            useFactory: ShareButtonsFactory,
                            deps: [core$1.CONFIG]
                        }
                    ]
                };
            };
        ShareButtonsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ShareButtonsComponent,
                            ExpandButtonComponent
                        ],
                        imports: [
                            button.ShareButtonModule,
                            common.CommonModule
                        ],
                        exports: [
                            button.ShareButtonModule,
                            ShareButtonsComponent
                        ]
                    },] },
        ];
        return ShareButtonsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.ShareButtonsFactory = ShareButtonsFactory;
    exports.ShareButtonsModule = ShareButtonsModule;
    exports.ShareButtonsComponent = ShareButtonsComponent;
    exports.ɵa = ExpandButtonComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,