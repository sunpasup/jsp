/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { ShareButtons } from '@ngx-share/core';
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
/**
 * @record
 */
export function ButtonsState() { }
function ButtonsState_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    ButtonsState.prototype.includedButtons;
    /** @type {?|undefined} */
    ButtonsState.prototype.excludedButtons;
    /** @type {?|undefined} */
    ButtonsState.prototype.userButtons;
    /** @type {?|undefined} */
    ButtonsState.prototype.selectedButtons;
    /** @type {?|undefined} */
    ButtonsState.prototype.expanded;
    /** @type {?|undefined} */
    ButtonsState.prototype.shownCount;
    /** @type {?|undefined} */
    ButtonsState.prototype.moreIcon;
    /** @type {?|undefined} */
    ButtonsState.prototype.lessIcon;
}
export class ShareButtonsComponent {
    /**
     * @param {?} _share
     */
    constructor(_share) {
        this._share = _share;
        this._stateWorker$ = new BehaviorSubject({
            includedButtons: [],
            excludedButtons: [],
            userButtons: [],
            selectedButtons: [],
            expanded: true,
            shownCount: Object.keys(this._share.config.prop).length
        });
        this.theme = this._share.theme;
        /**
         * Show buttons icon
         */
        this.showIcon = true;
        /**
         * Show buttons name
         */
        this.showText = false;
        /**
         * Show buttons share count
         */
        this.showCount = false;
        /**
         * Buttons size
         */
        this.size = 0;
        /**
         * Share count event
         */
        this.count = new EventEmitter();
        /**
         * Share dialog opened event
         */
        this.opened = new EventEmitter();
        /**
         * Share dialog closed event
         */
        this.closed = new EventEmitter();
    }
    /**
     * @param {?} includedButtons
     * @return {?}
     */
    set includedButtons(includedButtons) {
        this.updateState({ includedButtons });
    }
    /**
     * @param {?} excludedButtons
     * @return {?}
     */
    set excludedButtons(excludedButtons) {
        this.updateState({ excludedButtons });
    }
    /**
     * @param {?} shownCount
     * @return {?}
     */
    set shownButtons(shownCount) {
        this.updateState({ shownCount });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.state$ = this._stateWorker$.pipe(map((state) => {
            // Use component include buttons, otherwise fallback to global include buttons
            const /** @type {?} */ includedButtons = state.includedButtons.length ? state.includedButtons : state.userButtons;
            const /** @type {?} */ userButtons = includedButtons.filter((btn) => state.excludedButtons.indexOf(btn) < 0);
            const /** @type {?} */ selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);
            return {
                userButtons,
                selectedButtons,
                expanded: state.expanded,
                shownCount: state.shownCount,
                moreIcon: state.moreIcon,
                lessIcon: state.lessIcon
            };
        }));
        /** Subscribe to share buttons config changes, This updates the component whenever a new button is added */
        this._configSub$ = this._share.config$.subscribe((config) => {
            // Use global include buttons, otherwise fallback to all buttons
            const /** @type {?} */ includedButtons = config.options.include.length ? config.options.include : Object.keys(config.prop);
            const /** @type {?} */ userButtons = includedButtons.filter((btn) => config.options.exclude.indexOf(btn) < 0);
            this.updateState({
                userButtons,
                expanded: false,
                moreIcon: config.options.moreButtonIcon,
                lessIcon: config.options.lessButtonIcon
            });
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._configSub$) {
            this._configSub$.unsubscribe();
        }
        this._stateWorker$.complete();
    }
    /**
     * @param {?} state
     * @return {?}
     */
    updateState(state) {
        this._stateWorker$.next(Object.assign({}, this._stateWorker$.getValue(), state));
    }
}
ShareButtonsComponent.decorators = [
    { type: Component, args: [{
                selector: 'share-buttons',
                template: `<div *ngIf="state$ | async; let state" class="sb-group sb-{{theme}}">

  <share-button *ngFor="let button of state.selectedButtons"
                [button]="button"
                [theme]="theme"
                [url]="url"
                [title]="title"
                [description]="description"
                [image]="image"
                [tags]="tags"
                [autoSetMeta]="autoSetMeta"
                [showCount]="showCount"
                [showIcon]="showIcon"
                [showText]="showText"
                [size]="size"
                (opened)="opened.emit($event)"
                (closed)="closed.emit($event)"
                (count)="count.emit($event)"></share-button>

  <div class="sb-button sb-{{theme}}">

    <expand-button *ngIf="state.shownCount < state.userButtons.length"
                   [expanded]="state.expanded"
                   [moreIcon]="state.moreIcon"
                   [lessIcon]="state.lessIcon"
                   [size]="(1 + size/20) * 14"
                   (toggle)="updateState({expanded: $event})">
    </expand-button>

  </div>
</div>
`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
/** @nocollapse */
ShareButtonsComponent.ctorParameters = () => [
    { type: ShareButtons }
];
ShareButtonsComponent.propDecorators = {
    theme: [{ type: Input }],
    includedButtons: [{ type: Input, args: ['include',] }],
    excludedButtons: [{ type: Input, args: ['exclude',] }],
    shownButtons: [{ type: Input, args: ['show',] }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    showIcon: [{ type: Input }],
    showText: [{ type: Input }],
    showCount: [{ type: Input }],
    size: [{ type: Input }],
    count: [{ type: Output }],
    opened: [{ type: Output }],
    closed: [{ type: Output }]
};
function ShareButtonsComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ShareButtonsComponent.prototype.state$;
    /** @type {?} */
    ShareButtonsComponent.prototype._stateWorker$;
    /** @type {?} */
    ShareButtonsComponent.prototype._configSub$;
    /** @type {?} */
    ShareButtonsComponent.prototype.theme;
    /**
     * Share meta tags
     * @type {?}
     */
    ShareButtonsComponent.prototype.url;
    /** @type {?} */
    ShareButtonsComponent.prototype.title;
    /** @type {?} */
    ShareButtonsComponent.prototype.description;
    /** @type {?} */
    ShareButtonsComponent.prototype.image;
    /** @type {?} */
    ShareButtonsComponent.prototype.tags;
    /**
     * Set meta tags from document head, useful when SEO is supported
     * @type {?}
     */
    ShareButtonsComponent.prototype.autoSetMeta;
    /**
     * Show buttons icon
     * @type {?}
     */
    ShareButtonsComponent.prototype.showIcon;
    /**
     * Show buttons name
     * @type {?}
     */
    ShareButtonsComponent.prototype.showText;
    /**
     * Show buttons share count
     * @type {?}
     */
    ShareButtonsComponent.prototype.showCount;
    /**
     * Buttons size
     * @type {?}
     */
    ShareButtonsComponent.prototype.size;
    /**
     * Share count event
     * @type {?}
     */
    ShareButtonsComponent.prototype.count;
    /**
     * Share dialog opened event
     * @type {?}
     */
    ShareButtonsComponent.prototype.opened;
    /**
     * Share dialog closed event
     * @type {?}
     */
    ShareButtonsComponent.prototype.closed;
    /** @type {?} */
    ShareButtonsComponent.prototype._share;
}
/**
 * Explanation of the above code:
 * ------------------------------
 Include buttons: includes only wanted buttons and excludes the rest
 Exclude buttons: excludes only the unwanted buttons
 User buttons = Include buttons - exclude buttons
 Selected Buttons = User buttons [shown number]

 =====================================================================================

 Why do we use both include and exclude inputs?

 Because it is easier for users who want to disable one button to use [exclude] input instead of writing an array of all included buttons
 And it is easier for users who want to enable only one button to use [include] input instead of writing an array of all excluded buttons
 */

//# sourceMappingURL=data:application/json;base64,