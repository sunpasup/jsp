/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Input, Component, HostBinding } from '@angular/core';
import { icon, parse } from '@fortawesome/fontawesome-svg-core';
import { DomSanitizer } from '@angular/platform-browser';
import { faNormalizeIconSpec } from '../shared/utils/normalize-icon-spec.util';
import { objectWithKey } from '../shared/utils/object-with-keys.util';
import { faClassList } from '../shared/utils/classlist.util';
import { faWarnIfIconHtmlMissing } from '../shared/errors/warn-if-icon-html-missing';
import { faWarnIfIconSpecMissing } from '../shared/errors/warn-if-icon-spec-missing';
import { faNotFoundIconHtml } from '../shared/errors/not-found-icon-html';
/**
 * Fontawesome icon.
 */
export class FaIconComponent {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.classes = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes) {
            this.updateIconSpec();
            this.updateParams();
            this.updateIcon();
            this.renderIcon();
        }
    }
    /**
     * Updating icon spec.
     * @return {?}
     */
    updateIconSpec() {
        this.iconSpec = faNormalizeIconSpec(this.iconProp);
    }
    /**
     * Updating params by component props.
     * @return {?}
     */
    updateParams() {
        const /** @type {?} */ classOpts = {
            flip: this.flip,
            spin: this.spin,
            pulse: this.pulse,
            border: this.border,
            inverse: this.inverse,
            listItem: this.listItem,
            size: this.size || null,
            pull: this.pull || null,
            rotate: this.rotate || null,
            fixedWidth: this.fixedWidth
        };
        const /** @type {?} */ classes = objectWithKey('classes', [...faClassList(classOpts), ...this.classes]);
        const /** @type {?} */ mask = objectWithKey('mask', faNormalizeIconSpec(this.mask));
        const /** @type {?} */ parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;
        const /** @type {?} */ transform = objectWithKey('transform', parsedTransform);
        this.params = Object.assign({ title: this.title }, transform, classes, mask, { styles: this.styles, symbol: this.symbol });
    }
    /**
     * Updating icon by params and icon spec.
     * @return {?}
     */
    updateIcon() {
        this.icon = icon(this.iconSpec, this.params);
    }
    /**
     * Rendering icon.
     * @return {?}
     */
    renderIcon() {
        faWarnIfIconSpecMissing(this.iconSpec);
        faWarnIfIconHtmlMissing(this.icon, this.iconSpec);
        this.renderedIconHTML = this.sanitizer.bypassSecurityTrustHtml(this.icon ? this.icon.html.join('\n') : faNotFoundIconHtml);
    }
}
FaIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'fa-icon',
                template: ``,
                host: {
                    class: 'ng-fa-icon',
                }
            },] },
];
/** @nocollapse */
FaIconComponent.ctorParameters = () => [
    { type: DomSanitizer, },
];
FaIconComponent.propDecorators = {
    "renderedIconHTML": [{ type: HostBinding, args: ['innerHTML',] },],
    "iconProp": [{ type: Input, args: ['icon',] },],
    "title": [{ type: Input },],
    "spin": [{ type: Input },],
    "pulse": [{ type: Input },],
    "mask": [{ type: Input },],
    "styles": [{ type: Input },],
    "flip": [{ type: Input },],
    "size": [{ type: Input },],
    "pull": [{ type: Input },],
    "border": [{ type: Input },],
    "inverse": [{ type: Input },],
    "symbol": [{ type: Input },],
    "listItem": [{ type: Input },],
    "rotate": [{ type: Input },],
    "fixedWidth": [{ type: Input },],
    "classes": [{ type: Input },],
    "transform": [{ type: Input },],
};
function FaIconComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    FaIconComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    FaIconComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    FaIconComponent.propDecorators;
    /** @type {?} */
    FaIconComponent.prototype.icon;
    /** @type {?} */
    FaIconComponent.prototype.renderedIconHTML;
    /** @type {?} */
    FaIconComponent.prototype.params;
    /** @type {?} */
    FaIconComponent.prototype.iconSpec;
    /** @type {?} */
    FaIconComponent.prototype.iconProp;
    /** @type {?} */
    FaIconComponent.prototype.title;
    /** @type {?} */
    FaIconComponent.prototype.spin;
    /** @type {?} */
    FaIconComponent.prototype.pulse;
    /** @type {?} */
    FaIconComponent.prototype.mask;
    /** @type {?} */
    FaIconComponent.prototype.styles;
    /** @type {?} */
    FaIconComponent.prototype.flip;
    /** @type {?} */
    FaIconComponent.prototype.size;
    /** @type {?} */
    FaIconComponent.prototype.pull;
    /** @type {?} */
    FaIconComponent.prototype.border;
    /** @type {?} */
    FaIconComponent.prototype.inverse;
    /** @type {?} */
    FaIconComponent.prototype.symbol;
    /** @type {?} */
    FaIconComponent.prototype.listItem;
    /** @type {?} */
    FaIconComponent.prototype.rotate;
    /** @type {?} */
    FaIconComponent.prototype.fixedWidth;
    /** @type {?} */
    FaIconComponent.prototype.classes;
    /** @type {?} */
    FaIconComponent.prototype.transform;
    /** @type {?} */
    FaIconComponent.prototype.sanitizer;
}

//# sourceMappingURL=data:application/json;base64,