{"remainingRequest":"/Users/sunpasup/Documents/JSP/material-dashboard-angular-v2.1.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/sunpasup/Documents/JSP/material-dashboard-angular-v2.1.0/node_modules/@ngx-share/core/fesm5/ngx-share-core.js","dependencies":[{"path":"/Users/sunpasup/Documents/JSP/material-dashboard-angular-v2.1.0/node_modules/@ngx-share/core/fesm5/ngx-share-core.js","mtime":499162500000},{"path":"/Users/sunpasup/Documents/JSP/material-dashboard-angular-v2.1.0/node_modules/cache-loader/dist/cjs.js","mtime":1530135103530},{"path":"/Users/sunpasup/Documents/JSP/material-dashboard-angular-v2.1.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { InjectionToken, Inject, Injectable, Directive, Input, Output, HostListener, EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, PLATFORM_ID, Pipe, NgModule } from '@angular/core';\nimport { __spread, __assign, __read } from 'tslib';\nimport { of, BehaviorSubject, EMPTY } from 'rxjs';\nimport { tap, map, delay, switchMap, catchError, filter, take } from 'rxjs/operators';\nimport { isPlatformBrowser } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ CONFIG = new InjectionToken('CONFIG');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Simple object check.\n * @param {?} item\n * @return {?}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * Deep merge two objects.\n * @param {?} target\n * @param {...?} sources\n * @return {?}\n */\nfunction mergeDeep(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    if (!sources.length) {\n        return target;\n    }\n    var /** @type {?} */ source = sources.shift();\n    if (isObject(target) && isObject(source)) {\n        for (var /** @type {?} */ key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) {\n                    Object.assign(target, (_a = {}, _a[key] = {}, _a));\n                }\n                mergeDeep(target[key], source[key]);\n            }\n            else {\n                Object.assign(target, (_b = {}, _b[key] = source[key], _b));\n            }\n        }\n    }\n    return mergeDeep.apply(void 0, __spread([target], sources));\n    var _a, _b;\n}\n/**\n * Returns a readable number from share count\n * @param {?} num\n * @param {?} digits\n * @return {?}\n */\nfunction shareCountFormatter(num, digits) {\n    var /** @type {?} */ si = [\n        { value: 1E9, symbol: 'B' },\n        { value: 1E6, symbol: 'M' },\n        { value: 1E3, symbol: 'K' }\n    ], /** @type {?} */ rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    for (var /** @type {?} */ i = 0; i < si.length; i++) {\n        if (num >= si[i].value) {\n            return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\n        }\n    }\n    return num.toFixed(digits).replace(rx, '$1');\n}\n/**\n * Copy text to clipboard\n * @param {?} url\n * @param {?} browser\n * @return {?}\n */\nfunction copyToClipboard(url, browser) {\n    return of(url).pipe(tap(function (text) {\n        // Create a hidden textarea element\n        var /** @type {?} */ textArea = document.createElement('textarea');\n        textArea.value = text;\n        document.body.appendChild(textArea);\n        // highlight textarea to copy the text\n        if (browser === 'ios') {\n            var /** @type {?} */ range = document.createRange();\n            range.selectNodeContents(textArea);\n            var /** @type {?} */ selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n            textArea.readOnly = true;\n            textArea.setSelectionRange(0, 999999);\n        }\n        else {\n            textArea.select();\n        }\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n    }));\n}\n/**\n * Get meta tag content\n * @param {?} key\n * @return {?}\n */\nfunction getMetaContent(key) {\n    var /** @type {?} */ metaTag = document.querySelector(\"meta[property=\\\"\" + key + \"\\\"]\");\n    return metaTag ? metaTag.getAttribute('content') : undefined;\n}\n/**\n * Detect operating system 'ios', 'android', or 'desktop'\n * @return {?}\n */\nfunction getOS() {\n    var /** @type {?} */ userAgent = navigator.userAgent || navigator.vendor || ((window)).opera;\n    if (/android/i.test(userAgent)) {\n        return 'android';\n    }\n    if (/iPad|iPhone|iPod/.test(userAgent) && !((window)).MSStream) {\n        return 'ios';\n    }\n    return 'desktop';\n}\n/**\n * Returns a valid URL or falls back to current URL\n * @param {?} url\n * @param {?} fallbackUrl\n * @return {?}\n */\nfunction getValidUrl(url, fallbackUrl) {\n    if (url) {\n        var /** @type {?} */ r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n        if (r.test(url)) {\n            return url;\n        }\n        console.warn(\"[ShareButtons]: Sharing link '\" + url + \"' is invalid!\");\n    }\n    return fallbackUrl;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Meta tags operator - Serialize meta tags into the sharer URL\n */\nvar /** @type {?} */ metaTagsOperators = [\n    map(function (ref) {\n        // Social network sharer URL */\n        var /** @type {?} */ SharerURL = ref.prop.share[ref.os];\n        if (SharerURL) {\n            // object contains supported meta tags\n            var /** @type {?} */ metaTags = ref.prop.share.metaTags;\n            // object contains meta tags values */\n            var /** @type {?} */ metaTagsValues_1 = ref.metaTags;\n            var /** @type {?} */ link = '';\n            // Set each meta tag with user value\n            if (metaTags) {\n                link = Object.entries(metaTags).map(function (_a) {\n                    var _b = __read(_a, 2), key = _b[0], metaTag = _b[1];\n                    return metaTagsValues_1[key] ? metaTag + \"=\" + encodeURIComponent(metaTagsValues_1[key]) : '';\n                }).join('&');\n            }\n            return SharerURL + link;\n        }\n        return;\n    })\n];\n/**\n * Print button operator\n */\nvar /** @type {?} */ printOperators = [\n    map(function () { return window.print(); })\n];\n/**\n * Copy link to clipboard, used for copy button\n */\nvar /** @type {?} */ copyOperators = [\n    map(function (ref) {\n        // Disable the button\n        ref.renderer.setStyle(ref.el, 'pointer-events', 'none');\n        ref.temp = { text: ref.prop.text, icon: ref.prop.icon };\n        ref.metaTags.url = decodeURIComponent(ref.metaTags.url);\n        return ref;\n    }),\n    switchMap(function (ref) {\n        return copyToClipboard(ref.metaTags.url, ref.os).pipe(map(function () {\n            ref.prop.text = ref.prop.successText;\n            ref.prop.icon = ref.prop.successIcon;\n            return ref;\n        }), catchError(function () {\n            ref.prop.text = ref.prop.failText;\n            ref.prop.icon = ref.prop.failIcon;\n            return of(ref);\n        }));\n    }),\n    map(function (ref) {\n        ref.cd.markForCheck();\n        return ref;\n    }),\n    delay(2000),\n    map(function (ref) {\n        // Enable the button\n        ref.renderer.setStyle(ref.el, 'pointer-events', 'auto');\n        // Reset copy button text and icon */\n        ref.prop.text = ref.temp.text;\n        ref.prop.icon = ref.temp.icon;\n        ref.cd.markForCheck();\n    })\n];\n/**\n * Add the share URL to message body, used for WhatsApp and Email buttons\n */\nvar /** @type {?} */ urlInMessageOperators = [\n    map(function (ref) {\n        var /** @type {?} */ description = ref.metaTags.description;\n        var /** @type {?} */ url = ref.metaTags.url;\n        var /** @type {?} */ newRef = {\n            metaTags: {\n                description: description ? description + \"\\r\\n\" + url : url\n            }\n        };\n        return mergeDeep(ref, newRef);\n    })\n];\nvar /** @type {?} */ FacebookCountOperators = [\n    map(function (res) { return +res.share.share_count; })\n];\nvar /** @type {?} */ PinterestCountOperators = [\n    map(function (text) { return JSON.parse(text.replace(/^receiveCount\\((.*)\\)/, '$1')); }),\n    map(function (res) { return +res.count; })\n];\nvar /** @type {?} */ TumblrCountOperators = [\n    map(function (res) { return +res.response.note_count; })\n];\nvar /** @type {?} */ RedditCountOperators = [\n    map(function (res) { return +res.data.children[0].data.score; })\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ shareButtonsProp = {\n    facebook: {\n        type: 'facebook',\n        text: 'Facebook',\n        icon: ['fab', 'facebook-f'],\n        color: '#4267B2',\n        share: {\n            desktop: 'https://www.facebook.com/sharer/sharer.php?',\n            android: 'https://www.facebook.com/sharer/sharer.php?',\n            ios: 'https://www.facebook.com/sharer/sharer.php?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'u'\n            }\n        },\n        count: {\n            request: 'http',\n            url: 'https://graph.facebook.com?id=',\n            operators: FacebookCountOperators\n        }\n    },\n    twitter: {\n        type: 'twitter',\n        text: 'Twitter',\n        icon: ['fab', 'twitter'],\n        color: '#00acee',\n        share: {\n            desktop: 'https://twitter.com/intent/tweet?',\n            android: 'https://twitter.com/intent/tweet?',\n            ios: 'https://twitter.com/intent/tweet?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url',\n                description: 'text',\n                tags: 'hashtags',\n                via: 'via'\n            }\n        }\n    },\n    google: {\n        type: 'google',\n        text: 'Google+',\n        icon: ['fab', 'google-plus-g'],\n        color: '#DB4437',\n        share: {\n            desktop: 'https://plus.google.com/share?',\n            android: 'https://plus.google.com/share?',\n            ios: 'https://plus.google.com/share?',\n            metaTags: {\n                url: 'url',\n            },\n            operators: metaTagsOperators\n        }\n    },\n    linkedin: {\n        type: 'linkedin',\n        text: 'LinkedIn',\n        icon: ['fab', 'linkedin-in'],\n        color: '#006fa6',\n        share: {\n            desktop: 'http://www.linkedin.com/shareArticle?',\n            android: 'http://www.linkedin.com/shareArticle?',\n            ios: 'http://www.linkedin.com/shareArticle?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url',\n                title: 'title',\n                description: 'summary'\n            },\n        }\n    },\n    pinterest: {\n        type: 'pinterest',\n        text: 'Pinterest',\n        icon: ['fab', 'pinterest-p'],\n        color: '#BD091D',\n        share: {\n            desktop: 'https://in.pinterest.com/pin/create/button/?',\n            android: 'https://in.pinterest.com/pin/create/button/?',\n            ios: 'https://in.pinterest.com/pin/create/button/?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url',\n                description: 'description',\n                image: 'media'\n            }\n        },\n        count: {\n            request: 'http',\n            url: 'https://api.pinterest.com/v1/urls/count.json?url=',\n            args: { responseType: 'text' },\n            operators: PinterestCountOperators\n        }\n    },\n    reddit: {\n        type: 'reddit',\n        text: 'Reddit',\n        icon: ['fab', 'reddit-alien'],\n        color: '#FF4006',\n        share: {\n            desktop: 'http://www.reddit.com/submit?',\n            android: 'http://www.reddit.com/submit?',\n            ios: 'http://www.reddit.com/submit?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url',\n                title: 'title'\n            },\n        },\n        count: {\n            request: 'http',\n            url: 'https://buttons.reddit.com/button_info.json?url=',\n            operators: RedditCountOperators\n        },\n    },\n    tumblr: {\n        type: 'tumblr',\n        text: 'Tumblr',\n        icon: ['fab', 'tumblr'],\n        color: '#36465D',\n        share: {\n            desktop: 'http://tumblr.com/widgets/share/tool?',\n            android: 'http://tumblr.com/widgets/share/tool?',\n            ios: 'http://tumblr.com/widgets/share/tool?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'canonicalUrl',\n                description: 'caption',\n                tags: 'tags'\n            }\n        },\n        count: {\n            request: 'jsonp',\n            url: 'https://api.tumblr.com/v2/share/stats?url=',\n            operators: TumblrCountOperators\n        }\n    },\n    whatsapp: {\n        type: 'whatsapp',\n        text: 'WhatsApp',\n        icon: ['fab', 'whatsapp'],\n        color: '#25D366',\n        share: {\n            desktop: 'https://web.whatsapp.com/send?',\n            android: 'whatsapp://send?',\n            ios: 'whatsapp://send?',\n            operators: __spread(urlInMessageOperators, metaTagsOperators),\n            metaTags: {\n                description: 'text'\n            }\n        }\n    },\n    messenger: {\n        type: 'messenger',\n        text: 'Messenger',\n        icon: ['fab', 'facebook-messenger'],\n        color: '#0080FF',\n        share: {\n            android: 'fb-messenger://share/?',\n            ios: 'fb-messenger://share/?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'link'\n            }\n        }\n    },\n    telegram: {\n        type: 'telegram',\n        text: 'Telegram',\n        icon: ['fab', 'telegram-plane'],\n        color: '#0088cc',\n        share: {\n            desktop: 'https://t.me/share/url?',\n            android: 'https://t.me/share/url?',\n            ios: 'https://t.me/share/url?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url',\n                description: 'text'\n            }\n        }\n    },\n    vk: {\n        type: 'vk',\n        text: 'VKontakte',\n        icon: ['fab', 'vk'],\n        color: '#4C75A3',\n        share: {\n            desktop: 'http://vk.com/share.php?',\n            android: 'http://vk.com/share.php?',\n            ios: 'http://vk.com/share.php?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url'\n            }\n        }\n    },\n    stumble: {\n        type: 'stumble',\n        text: 'Stumble',\n        icon: ['fab', 'stumbleupon'],\n        color: '#eb4924',\n        share: {\n            desktop: 'http://www.stumbleupon.com/submit?',\n            android: 'http://www.stumbleupon.com/submit?',\n            ios: 'http://www.stumbleupon.com/submit?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url'\n            }\n        }\n    },\n    xing: {\n        type: 'xing',\n        text: 'Xing',\n        icon: ['fab', 'xing'],\n        color: '#006567',\n        share: {\n            desktop: 'https://www.xing.com/app/user?op=share&',\n            android: 'https://www.xing.com/app/user?op=share&',\n            ios: 'https://www.xing.com/app/user?op=share&',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url'\n            }\n        }\n    },\n    sms: {\n        type: 'sms',\n        text: 'SMS',\n        icon: 'comment-alt',\n        color: '#20c16c',\n        share: {\n            desktop: 'sms:?',\n            android: 'sms:?',\n            ios: 'sms:?',\n            metaTags: {\n                description: 'body'\n            },\n            operators: __spread(urlInMessageOperators, metaTagsOperators)\n        }\n    },\n    email: {\n        type: 'email',\n        text: 'Email',\n        icon: 'envelope',\n        color: '#FF961C',\n        share: {\n            desktop: 'mailto:?',\n            android: 'mailto:?',\n            ios: 'mailto:?',\n            operators: __spread(urlInMessageOperators, metaTagsOperators),\n            metaTags: {\n                title: 'subject',\n                description: 'body'\n            }\n        }\n    },\n    copy: {\n        type: 'copy',\n        text: 'Copy link',\n        successText: 'Copied',\n        successIcon: 'check',\n        failText: 'Error',\n        failIcon: 'exclamation',\n        icon: 'link',\n        color: '#607D8B',\n        share: {\n            operators: copyOperators\n        }\n    },\n    print: {\n        type: 'print',\n        text: 'Print',\n        icon: 'print',\n        color: '#765AA2',\n        share: {\n            operators: printOperators\n        }\n    }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ShareButtons = /*@__PURE__*/ (function () {\n    function ShareButtons(config) {\n        this.config = {\n            prop: shareButtonsProp,\n            options: {\n                theme: 'default',\n                include: [],\n                exclude: [],\n                size: 0,\n                url: undefined,\n                title: undefined,\n                description: undefined,\n                image: undefined,\n                tags: undefined,\n                twitterAccount: undefined,\n                autoSetMeta: true,\n                gaTracking: false,\n                windowWidth: 800,\n                windowHeight: 500,\n                moreButtonIcon: 'ellipsis-h',\n                lessButtonIcon: 'minus'\n            }\n        };\n        this.config$ = new BehaviorSubject(this.config);\n        if (config) {\n            this.setConfig(config);\n        }\n    }\n    Object.defineProperty(ShareButtons.prototype, \"prop\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.config.prop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"twitterAccount\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.config.options.twitterAccount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"theme\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.config.options.theme;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"windowSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return \"width=\" + this.config.options.windowWidth + \", height=\" + this.config.options.windowHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"url\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.config.options.url;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"title\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.config.options.title;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"description\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.config.options.description;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"image\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.config.options.image;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"tags\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.config.options.tags;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"autoSetMeta\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.config.options.autoSetMeta;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"gaTracking\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.config.options.gaTracking;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"size\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.config.options.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    ShareButtons.prototype.setConfig = /**\n     * @param {?} config\n     * @return {?}\n     */\n        function (config) {\n            this.config = mergeDeep(this.config, config);\n            this.config$.next(this.config);\n        };\n    /**\n     * @param {?} name\n     * @param {?} data\n     * @return {?}\n     */\n    ShareButtons.prototype.addButton = /**\n     * @param {?} name\n     * @param {?} data\n     * @return {?}\n     */\n        function (name, data) {\n            var /** @type {?} */ config = {\n                prop: __assign({}, shareButtonsProp, (_a = {}, _a[name] = data, _a))\n            };\n            this.setConfig(config);\n            var _a;\n        };\n    return ShareButtons;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ShareButtonDirective = /*@__PURE__*/ (function () {\n    function ShareButtonDirective(shareService, http, renderer, cd, el, platform) {\n        this.shareService = shareService;\n        this.http = http;\n        this.renderer = renderer;\n        this.cd = cd;\n        this.el = el;\n        this.platform = platform;\n        /**\n         * Get share count\n         */\n        this.getCount = false;\n        /**\n         * Set meta tags from document head, useful when SEO is supported\n         */\n        this.autoSetMeta = this.shareService.autoSetMeta;\n        /**\n         * Meta tags inputs - initialized from the global options\n         */\n        this.url = this.shareService.url;\n        this.title = this.shareService.title;\n        this.description = this.shareService.description;\n        this.image = this.shareService.image;\n        this.tags = this.shareService.tags;\n        /**\n         * Stream that emits when share count is fetched\n         */\n        this.count = new EventEmitter();\n        /**\n         * Stream that emits when share dialog is opened\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Stream that emits when share dialog is closed\n         */\n        this.closed = new EventEmitter();\n    }\n    /** Share link on element click */\n    /**\n     * Share link on element click\n     * @return {?}\n     */\n    ShareButtonDirective.prototype.onClick = /**\n     * Share link on element click\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (isPlatformBrowser(this.platform)) {\n                var /** @type {?} */ metaTags = this.autoSetMeta ? {\n                    url: this.url,\n                    title: this.title || getMetaContent('og:title'),\n                    description: this.description || getMetaContent('og:description'),\n                    image: this.image || getMetaContent('og:image'),\n                    via: this.shareService.twitterAccount || getMetaContent('twitter:site'),\n                    tags: this.tags,\n                } : {\n                    url: this.url,\n                    title: this.title,\n                    description: this.description,\n                    image: this.image,\n                    tags: this.tags,\n                    via: this.shareService.twitterAccount,\n                };\n                var /** @type {?} */ ref = {\n                    cd: this.cd,\n                    renderer: this.renderer,\n                    prop: this.prop,\n                    el: this.el.nativeElement,\n                    os: getOS(),\n                    metaTags: metaTags\n                };\n                // Share the link\n                // Share the link\n                (_a = of(ref)).pipe.apply(_a, __spread(this.prop.share.operators, [tap(function (sharerURL) { return _this.share(sharerURL); }),\n                    take(1)])).subscribe();\n            }\n            var _a;\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ShareButtonDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            var _this = this;\n            if (isPlatformBrowser(this.platform)) {\n                if (changes['shareButton'] && (changes['shareButton'].firstChange || changes['shareButton'].previousValue !== this.shareButton)) {\n                    this.createShareButton(this.shareButton);\n                }\n                if (!this.url || (changes['url'] && changes['url'].previousValue !== this.url)) {\n                    of(null).pipe(map(function () {\n                        _this.url = getValidUrl(_this.autoSetMeta ? _this.url || getMetaContent('og:url') : _this.url, window.location.href);\n                        return _this.url;\n                    }), filter(function () { return _this.prop.count && _this.getCount; }), switchMap(function (url) { return _this.shareCount(url); }), tap(function (shareCount) { return _this.count.emit(shareCount); }), take(1)).subscribe();\n                }\n            }\n        };\n    /**\n     * Open sharing dialog\n     * @param url - Share URL\n     */\n    /**\n     * Open sharing dialog\n     * @param {?} url - Share URL\n     * @return {?}\n     */\n    ShareButtonDirective.prototype.share = /**\n     * Open sharing dialog\n     * @param {?} url - Share URL\n     * @return {?}\n     */\n        function (url) {\n            var _this = this;\n            if (url) {\n                // GA Tracking\n                if (this.shareService.gaTracking && typeof ga !== 'undefined') {\n                    ga('send', 'social', this.prop.type, 'click', this.url);\n                }\n                // Emit when share dialog is opened\n                this.opened.emit(this.prop.type);\n                var /** @type {?} */ popUp_1 = window.open(url, 'newwindow', this.shareService.windowSize);\n                // Emit when share dialog is closed\n                if (popUp_1) {\n                    var /** @type {?} */ pollTimer_1 = window.setInterval(function () {\n                        if (popUp_1.closed) {\n                            window.clearInterval(pollTimer_1);\n                            _this.closed.emit(_this.prop.type);\n                        }\n                    }, 200);\n                }\n            }\n        };\n    /**\n     * Get link share count\n     * @param url - Share URL\n     * @returns Share count\n     */\n    /**\n     * Get link share count\n     * @param {?} url - Share URL\n     * @return {?} Share count\n     */\n    ShareButtonDirective.prototype.shareCount = /**\n     * Get link share count\n     * @param {?} url - Share URL\n     * @return {?} Share count\n     */\n        function (url) {\n            if (this.prop.count.request === 'jsonp') {\n                return (_a = this.http.jsonp(this.prop.count.url + url, 'callback')).pipe.apply(_a, __spread(this.prop.count.operators, [catchError(function () { return EMPTY; })]));\n            }\n            else {\n                return (_b = this.http.get(this.prop.count.url + url, this.prop.count.args)).pipe.apply(_b, __spread(this.prop.count.operators, [catchError(function () { return EMPTY; })]));\n            }\n            var _a, _b;\n        };\n    /**\n     * @param {?} buttonsName\n     * @return {?}\n     */\n    ShareButtonDirective.prototype.createShareButton = /**\n     * @param {?} buttonsName\n     * @return {?}\n     */\n        function (buttonsName) {\n            var /** @type {?} */ button = __assign({}, this.shareService.prop[buttonsName]);\n            if (button) {\n                // Set share button properties\n                this.prop = button;\n                // Remove previous button class\n                this.renderer.removeClass(this.el.nativeElement, \"sb-\" + this._buttonClass);\n                // Add new button class\n                this.renderer.addClass(this.el.nativeElement, \"sb-\" + button.type);\n                // Set button css color variable\n                this.el.nativeElement.style.setProperty('--button-color', this.prop.color);\n                // Keep a copy of the class for future replacement\n                this._buttonClass = button.type;\n                // Set aria-label attribute\n                this.renderer.setAttribute(this.el.nativeElement, 'aria-label', button.ariaLabel || button.text);\n            }\n            else {\n                throw new Error(\"[ShareButtons]: The share button '\" + buttonsName + \"' does not exist!\");\n            }\n        };\n    return ShareButtonDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ShareCountPipe = /*@__PURE__*/ (function () {\n    function ShareCountPipe() {\n    }\n    /**\n     * @param {?} num\n     * @param {?=} digits\n     * @return {?}\n     */\n    ShareCountPipe.prototype.transform = /**\n     * @param {?} num\n     * @param {?=} digits\n     * @return {?}\n     */\n        function (num, digits) {\n            return shareCountFormatter(num, digits);\n        };\n    return ShareCountPipe;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction ShareButtonsFactory(config) {\n    return new ShareButtons(config);\n}\nvar ShareModule = /*@__PURE__*/ (function () {\n    function ShareModule() {\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    ShareModule.forRoot = /**\n     * @param {?=} config\n     * @return {?}\n     */\n        function (config) {\n            return {\n                ngModule: ShareModule,\n                providers: [\n                    { provide: CONFIG, useValue: config },\n                    {\n                        provide: ShareButtons,\n                        useFactory: ShareButtonsFactory,\n                        deps: [CONFIG]\n                    }\n                ]\n            };\n        };\n    return ShareModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { ShareButtonsFactory, ShareModule, ShareButtons, ShareButtonDirective, metaTagsOperators, printOperators, copyOperators, urlInMessageOperators, FacebookCountOperators, PinterestCountOperators, TumblrCountOperators, RedditCountOperators, shareButtonsProp, ShareCountPipe, CONFIG };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64, \n",null]}